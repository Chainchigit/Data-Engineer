{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Chainchigit/Data-Engineer/blob/main/text_sanitizer.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "WYT57XesPT5u",
        "outputId": "9d50fa15-3ebb-41b0-f10f-1df60ebb1242"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-6978cb50-fcfa-4939-bedd-0660e334ab0a\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-6978cb50-fcfa-4939-bedd-0660e334ab0a\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Input.txt to Input.txt\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "with open(\"Input.txt\", \"r\", encoding=\"utf-8\") as file:\n",
        "    content = file.read()\n",
        "    print(content)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K_N6hr24Pe3f",
        "outputId": "1acc213e-7aaa-432f-d362-19b7b044d1f4"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello,\n",
            "This is a sample\ttext file.\n",
            "\tIt contains multiple lines, different spacing,\n",
            "and\tsome tabs.\n",
            "\n",
            "This should be sanitized correctly!\n",
            "Let's see how well it works.\n",
            "\n",
            "Additional lines are added to test the functionality.\n",
            "\tTabs should be replaced with underscores.\n",
            "Line breaks should remain as they are.\n",
            "\n",
            "This is a longer paragraph to check how the text sanitizer\n",
            "handles large chunks of text. It should properly process and\n",
            "clean all input data efficiently, regardless of size.\n",
            "\n",
            "Another test line with multiple words and spaces     to see \n",
            "how well extra spaces are handled.\n",
            "\n",
            "Finally, some numbers and symbols: 1234567890 !@#$%^&*()\n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import string\n",
        "import json\n",
        "\n",
        "class TextSanitizer:\n",
        "    \"\"\"Class for reading, sanitizing, and analyzing text.\"\"\"\n",
        "\n",
        "    def __init__(self, file_path, output_file=\"output.json\"):\n",
        "        \"\"\"\n",
        "        Initialize the TextSanitizer with a file path.\n",
        "\n",
        "        :param file_path: Path to the input text file.\n",
        "        :param output_file: Path to the output JSON file.\n",
        "        \"\"\"\n",
        "        self.file_path = file_path\n",
        "        self.output_file = output_file\n",
        "        self.text = \"\"\n",
        "        self.sanitized_text = \"\"\n",
        "        self.statistics = {}\n",
        "\n",
        "    def read_file(self):\n",
        "        \"\"\"Reads input text from a file.\"\"\"\n",
        "        try:\n",
        "            with open(self.file_path, 'r', encoding='utf-8') as file:\n",
        "                self.text = file.read()\n",
        "        except FileNotFoundError:\n",
        "            print(f\"Error: File '{self.file_path}' not found.\")\n",
        "            exit(1)\n",
        "\n",
        "    def sanitize_text(self):\n",
        "        \"\"\"Sanitizes the text by converting it to lowercase and replacing tabs.\"\"\"\n",
        "        self.sanitized_text = self.text.lower().replace('\\t', '____')\n",
        "\n",
        "    def generate_statistics(self):\n",
        "        \"\"\"Generates character occurrence statistics.\"\"\"\n",
        "        self.statistics = {char: self.sanitized_text.count(char) for char in string.ascii_lowercase}\n",
        "\n",
        "    def output_result(self):\n",
        "        \"\"\"Prints sanitized text and statistics or writes to a file.\"\"\"\n",
        "        output_data = {\n",
        "            \"sanitized_text\": self.sanitized_text,\n",
        "            \"statistics\": self.statistics\n",
        "        }\n",
        "\n",
        "        # Save output to a JSON file\n",
        "        with open(self.output_file, 'w', encoding='utf-8') as file:\n",
        "            json.dump(output_data, file, indent=4)\n",
        "        print(f\"Output saved to '{self.output_file}'\")\n",
        "\n",
        "        # Print results\n",
        "        print(\"\\n🔹 **Sanitized Text:**\")\n",
        "        print(self.sanitized_text)\n",
        "        print(\"\\n🔹 **Character Frequency:**\")\n",
        "        for char, count in self.statistics.items():\n",
        "            print(f\"{char}: {count}\")\n",
        "\n",
        "    def process(self):\n",
        "        \"\"\"Runs the complete text processing workflow.\"\"\"\n",
        "        self.read_file()\n",
        "        self.sanitize_text()\n",
        "        self.generate_statistics()\n",
        "        self.output_result()\n",
        "\n",
        "# Run the sanitizer on the uploaded Input.txt file\n",
        "if __name__ == \"__main__\":\n",
        "    file_path = \"Input.txt\"  # Adjust if necessary\n",
        "    sanitizer = TextSanitizer(file_path)\n",
        "    sanitizer.process()\n"
      ],
      "metadata": {
        "id": "VSjARUI_Emf7",
        "outputId": "82bba67a-e96b-4cc8-fe65-198f2873302e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Output saved to 'output.json'\n",
            "\n",
            "🔹 **Sanitized Text:**\n",
            "hello,\n",
            "this is a sample____text file.\n",
            "____it contains multiple lines, different spacing,\n",
            "and____some tabs.\n",
            "\n",
            "this should be sanitized correctly!\n",
            "let's see how well it works.\n",
            "\n",
            "additional lines are added to test the functionality.\n",
            "____tabs should be replaced with underscores.\n",
            "line breaks should remain as they are.\n",
            "\n",
            "this is a longer paragraph to check how the text sanitizer\n",
            "handles large chunks of text. it should properly process and\n",
            "clean all input data efficiently, regardless of size.\n",
            "\n",
            "another test line with multiple words and spaces     to see \n",
            "how well extra spaces are handled.\n",
            "\n",
            "finally, some numbers and symbols: 1234567890 !@#$%^&*()\n",
            "\n",
            "\n",
            "\n",
            "🔹 **Character Frequency:**\n",
            "a: 40\n",
            "b: 7\n",
            "c: 15\n",
            "d: 23\n",
            "e: 61\n",
            "f: 9\n",
            "g: 5\n",
            "h: 22\n",
            "i: 34\n",
            "j: 0\n",
            "k: 4\n",
            "l: 38\n",
            "m: 8\n",
            "n: 29\n",
            "o: 27\n",
            "p: 13\n",
            "q: 0\n",
            "r: 26\n",
            "s: 45\n",
            "t: 42\n",
            "u: 11\n",
            "v: 0\n",
            "w: 9\n",
            "x: 4\n",
            "y: 7\n",
            "z: 3\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "toc_visible": true,
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
